{"version":3,"sources":["color.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","toDos","setToDos","update","setUpdate","useEffect","loadWork","loadToDos","saveCurrentWork","work","a","async","AsyncStorage","setItem","JSON","stringify","getItem","savedWorking","parse","saveToDos","toSave","toDoJSON","onUpdate","key","View","style","styles","container","StatusBar","header","Pressable","onPress","Text","btnText","color","TextInput","onSubmitEditing","Date","now","newToDos","done","console","log","value","onChangeText","payload","returnKeyType","placeholder","input","ScrollView","Object","keys","map","toDo","toDoTextContainer","toDoTextInput","nativeEvent","updateToDoText","numberOfLines","toDoText","textDecorationLine","accessoryContainer","currentDone","onDone","AntDesign","name","size","Octicons","Platform","OS","confirm","Alert","alert","deleteToDo","Ionicons","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","fontWeight","fontSize","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems","marginLeft"],"mappings":"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","file":"static/js/app.963a8417.chunk.js","sourcesContent":["export const theme = {\r\n    background: 'black',\r\n    gray: '#3a3d40',\r\n    toDoBg: '#5c5c60',\r\n};\r\n","import { StatusBar } from \"expo-status-bar\";\r\nimport { useState, useEffect } from \"react\";\r\nimport {\r\n    StyleSheet,\r\n    Text,\r\n    View,\r\n    Pressable,\r\n    TextInput,\r\n    ScrollView,\r\n    Alert,\r\n    Platform,\r\n} from \"react-native\";\r\nimport { theme } from \"./color\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport { Ionicons } from \"@expo/vector-icons\";\r\nimport { AntDesign } from \"@expo/vector-icons\";\r\nimport { Octicons } from \"@expo/vector-icons\";\r\n\r\nconst STORAGE_TODOS_KEY = \"@toDos\";\r\nconst STORAGE_CURRENT_WORK_KEY = \"@working\";\r\n\r\nexport default function App() {\r\n    const [working, setWorking] = useState(true);\r\n    const [text, setText] = useState(\"\");\r\n    const [toDos, setToDos] = useState({});\r\n    const [update, setUpdate] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        loadWork();\r\n        loadToDos();\r\n    }, []);\r\n\r\n    const saveCurrentWork = async (work) => {\r\n        await AsyncStorage.setItem(\r\n            STORAGE_CURRENT_WORK_KEY,\r\n            JSON.stringify(work),\r\n        );\r\n    };\r\n\r\n    const loadWork = async () => {\r\n        const savedWorking = await AsyncStorage.getItem(\r\n            STORAGE_CURRENT_WORK_KEY,\r\n        );\r\n        setWorking(JSON.parse(savedWorking));\r\n    };\r\n\r\n    const saveToDos = async (toSave) => {\r\n        const toDoJSON = JSON.stringify(toSave);\r\n        await AsyncStorage.setItem(STORAGE_TODOS_KEY, toDoJSON);\r\n    };\r\n\r\n    const loadToDos = async () => {\r\n        const toDoJSON = await AsyncStorage.getItem(STORAGE_TODOS_KEY);\r\n        if (toDoJSON != null) {\r\n            setToDos(JSON.parse(toDoJSON));\r\n        }\r\n    };\r\n\r\n    const deleteToDo = async (key) => {\r\n        if (Platform.OS === \"web\") {\r\n            const ok = confirm(\"Delete To Do?\");\r\n            if (ok === true) {\r\n                const newToDos = { ...toDos };\r\n                delete newToDos[key];\r\n                setToDos(newToDos);\r\n\r\n                await saveToDos(newToDos);\r\n            }\r\n        } else {\r\n            Alert.alert(\"Delete To Do?\", \"Are you sure?\", [\r\n                { text: \"Cancel\" },\r\n                {\r\n                    text: \"I'm sure\",\r\n                    style: \"destructive\",\r\n                    onPress: async () => {\r\n                        const newToDos = { ...toDos };\r\n                        delete newToDos[key];\r\n                        setToDos(newToDos);\r\n\r\n                        await saveToDos(newToDos);\r\n                    },\r\n                },\r\n            ]);\r\n        }\r\n    };\r\n\r\n    const travel = async () => {\r\n        const w = false;\r\n        setWorking(w);\r\n        await saveCurrentWork(w);\r\n    };\r\n\r\n    const work = async () => {\r\n        const w = true;\r\n        setWorking(w);\r\n        await saveCurrentWork(w);\r\n    };\r\n\r\n    const onDone = async (key) => {\r\n        const newToDos = { ...toDos };\r\n        let currentDone = newToDos[key].done;\r\n        newToDos[key].done = !currentDone;\r\n        setToDos(newToDos);\r\n\r\n        await saveToDos(newToDos);\r\n    };\r\n\r\n    const onUpdate = (key) => {\r\n        setUpdate(key);\r\n    };\r\n\r\n    const onChangeText = (payload) => setText(payload);\r\n    const updateToDoText = async (key, text) => {\r\n        const newToDos = { ...toDos };\r\n        newToDos[key].text = text;\r\n\r\n        setToDos(newToDos);\r\n        setUpdate(\"\");\r\n\r\n        await saveToDos(newToDos);\r\n    };\r\n    const addToDo = async () => {\r\n        if (text === \"\") {\r\n            return;\r\n        }\r\n\r\n        const key = Date.now();\r\n\r\n        const newToDos = {\r\n            ...toDos,\r\n            [key]: { text, working, done: false },\r\n        };\r\n\r\n        console.log(newToDos);\r\n\r\n        setToDos(newToDos);\r\n        await saveToDos(newToDos);\r\n        setText(\"\");\r\n    };\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <StatusBar style=\"auto\" />\r\n            <View style={styles.header}>\r\n                <Pressable onPress={work}>\r\n                    <Text\r\n                        style={{\r\n                            ...styles.btnText,\r\n                            color: working ? \"white\" : theme.gray,\r\n                        }}\r\n                    >\r\n                        Work\r\n                    </Text>\r\n                </Pressable>\r\n                <Pressable onPress={travel}>\r\n                    <Text\r\n                        style={{\r\n                            ...styles.btnText,\r\n                            color: working ? theme.gray : \"white\",\r\n                        }}\r\n                    >\r\n                        Travel\r\n                    </Text>\r\n                </Pressable>\r\n            </View>\r\n            <View>\r\n                <TextInput\r\n                    onSubmitEditing={addToDo}\r\n                    value={text}\r\n                    onChangeText={onChangeText}\r\n                    returnKeyType=\"done\"\r\n                    placeholder={\r\n                        working ? \"Add a To Do\" : \"Where do you want to go?\"\r\n                    }\r\n                    style={styles.input}\r\n                />\r\n            </View>\r\n            <ScrollView>\r\n                {toDos === null\r\n                    ? null\r\n                    : Object.keys(toDos).map((key) =>\r\n                          toDos[key].working === working ? (\r\n                              <View style={styles.toDo} key={key}>\r\n                                  <View style={styles.toDoTextContainer}>\r\n                                      {update === key ? (\r\n                                          <TextInput\r\n                                              style={styles.toDoTextInput}\r\n                                              onSubmitEditing={({\r\n                                                  nativeEvent: { text },\r\n                                              }) => {\r\n                                                  updateToDoText(key, text);\r\n                                              }}\r\n                                          >\r\n                                              {toDos[key].text}\r\n                                          </TextInput>\r\n                                      ) : (\r\n                                          <Text\r\n                                              numberOfLines={0}\r\n                                              style={\r\n                                                  toDos[key].done === true\r\n                                                      ? {\r\n                                                            ...styles.toDoText,\r\n                                                            textDecorationLine:\r\n                                                                \"line-through\",\r\n                                                        }\r\n                                                      : styles.toDoText\r\n                                              }\r\n                                          >\r\n                                              {toDos[key].text}\r\n                                          </Text>\r\n                                      )}\r\n                                  </View>\r\n\r\n                                  <View style={styles.accessoryContainer}>\r\n                                      <Pressable\r\n                                          onPress={() => {\r\n                                              onDone(key);\r\n                                          }}\r\n                                      >\r\n                                          {toDos[key].done === true ? (\r\n                                              <AntDesign\r\n                                                  name=\"checksquare\"\r\n                                                  size={24}\r\n                                                  color=\"orange\"\r\n                                              />\r\n                                          ) : (\r\n                                              <AntDesign\r\n                                                  name=\"checksquareo\"\r\n                                                  size={24}\r\n                                                  color=\"orange\"\r\n                                              />\r\n                                          )}\r\n                                      </Pressable>\r\n\r\n                                      <Pressable\r\n                                          onPress={() => {\r\n                                              update === \"\"\r\n                                                  ? onUpdate(key)\r\n                                                  : onUpdate(\"\");\r\n                                          }}\r\n                                      >\r\n                                          <Octicons\r\n                                              name=\"pencil\"\r\n                                              size={24}\r\n                                              color=\"orange\"\r\n                                          />\r\n                                      </Pressable>\r\n                                      <Pressable\r\n                                          onPress={() => {\r\n                                              deleteToDo(key);\r\n                                          }}\r\n                                      >\r\n                                          <Ionicons\r\n                                              name=\"trash-outline\"\r\n                                              size={24}\r\n                                              color=\"orange\"\r\n                                          />\r\n                                      </Pressable>\r\n                                  </View>\r\n                              </View>\r\n                          ) : null,\r\n                      )}\r\n            </ScrollView>\r\n        </View>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: theme.background,\r\n        paddingHorizontal: 20,\r\n    },\r\n\r\n    header: {\r\n        justifyContent: \"space-between\",\r\n        flexDirection: \"row\",\r\n        marginTop: 100,\r\n    },\r\n\r\n    btnText: {\r\n        fontWeight: \"600\",\r\n        fontSize: 38,\r\n    },\r\n\r\n    input: {\r\n        backgroundColor: \"white\",\r\n        paddingVertical: 15,\r\n        paddingHorizontal: 20,\r\n        borderRadius: 30,\r\n        marginVertical: 20,\r\n        fontSize: 18,\r\n    },\r\n\r\n    toDo: {\r\n        flex: 1,\r\n        backgroundColor: theme.toDoBg,\r\n        marginBottom: 10,\r\n        paddingVertical: 20,\r\n        paddingHorizontal: 20,\r\n        borderRadius: 15,\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"space-between\",\r\n    },\r\n\r\n    toDoText: {\r\n        color: \"white\",\r\n        fontSize: 16,\r\n        fontWeight: \"500\",\r\n    },\r\n\r\n    accessoryContainer: {\r\n        flex: 1.5,\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"space-between\",\r\n        marginLeft: 10,\r\n    },\r\n\r\n    toDoTextContainer: {\r\n        flex: 3,\r\n    },\r\n\r\n    toDoTextInput: {\r\n        backgroundColor: \"white\",\r\n        color: \"black\",\r\n        fontSize: 16,\r\n        fontWeight: \"500\",\r\n        paddingVertical: 10,\r\n        paddingHorizontal: 10,\r\n        borderRadius: 5,\r\n    },\r\n});\r\n"],"sourceRoot":""}